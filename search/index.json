[{"content":"git基本用法 1. git init 创建本地仓库 2. git add . 把代码从代码区添加到暂存区 3. git commit -m \u0026quot;第一次提交代码\u0026quot; 从暂存区提交到本地仓库 4. git status 查看git此时的提交状态 5. git log 查看提交记录 6. git reset --hard HEAD-n 回退到上n个版本 7. git reflog 查看操作记录 8. git reset --hard 6位版本号 回退到指定版本 9. git remote add origin https://gitee.com/qingfeitang/life-progress-bar.git 添加远程仓库地址 10. git push origin master 推送到远程仓库 11. git clone https://gitee.com/qingfeitang/life-progress-bar.git 克隆仓库 12. git pull origin master 拉取服务器代码与本地代码合并（本地提交后在拉取） 13. git branch -a 查看所有分支 14. git checkout -b devkerwin 创建新的分支 15. git checkout master 切换分支 16. git merge devkerwin 合并分支 17. git push origin devkerwin 将分支推送到远程分支 18. git push origin :devkerwin 删除远程分支 19. git branch -d devkerwin 删除本地分支（先切换到master分支在执行） git配置全局代理 在使用 Git 时，如果需要通过代理访问远程仓库（例如解决因网络限制无法访问 GitHub 的问题），可以配置HTTP/HTTPS代理。\n设置HTTP/HTTPS代理\ngit config --global http.proxy http://proxy_url:port git config --global https.proxy http://proxy_url:port 验证配置是否生效\ngit config --global --get http.proxy git config --global --get https.proxy 清除代理配置\ngit config --global --unset http.proxy git config --global --unset https.proxy 清除或替换git旧凭据 现象：当我执行git push origin main的时候，报如下错误：remote: Permission to qingfeitang/tsne.git denied to qftang001. fatal: unable to access \u0026lsquo;https://github.com/qingfeitang/tsne.git/': The requested URL returned error: 403\n原因：使用 HTTPS 时，GitHub 会要求你进行身份验证。如果你的本地配置保存了错误或者旧的凭据，可能会导致权限错误。\n清除旧凭据\ngit config --system --unset credential.helper 为 Git 设置正确的用户名和邮箱\ngit config --global user.name \u0026quot;Your GitHub Username\u0026quot;\ngit config --global user.email \u0026quot;Your GitHub Email\u0026quot; 更新凭据：当再次git push时，Git会要求输入用户名和密码。GitHub 最近要求使用 Personal Access Token（PAT） 而不是密码，因此确保使用正确的 GitHub 个人访问令牌。 GitHub 个人访问令牌管理页面 自动保存Git凭据 Git 自带一个凭据管理工具，可以将用户名和密码（或个人访问令牌）安全地存储在本地\n确保 Git Credential Manager 已启用\ngit config --global credential.helper manager\n执行 git push 时，首次输入用户名和密码后，Git Credential Manager 会将凭据保存下来。\n以后使用相同的仓库时，Git 会自动填充用户名和密码，无需再次输入。\n","date":"2025-01-08T14:45:11+08:00","permalink":"https://qingfeitang.github.io/full-stack-blog/p/git%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/","title":"Git基础用法"},{"content":"一. 服务器环境准备 CentOs: CentOS Linux release 7.9.2009 (Core)\nnginx：1.29\n二. 编译nginx所需的基础环境和下载nginx源码包 安装基础环境 yum install gcc -y yum install pcre pcre-devel -y yum install openssl openssl-devel -y yum install wget -y 下载nginx和nginx-http-flv-module源码包 mkdir -p /opt/backup/docker-build/nginx-flv/nginx-src cd /opt/backup/docker-build/nginx-flv/nginx-src wget http://nginx.org/download/nginx-1.27.2.tar.gz tar -zxf nginx-nginx-1.27.2.tar.gz git clone https://github.com/winshining/nginx-http-flv-module.git 编译安装，完成后会安装在/usr/local/nginx-flv-rtmp下 ./configure --prefix=/usr/local/nginx-flv-rtmp --with-http_ssl_module --with-http_secure_link_module --add-module=nginx-http-flv-module make make install 如果安装过程中出现库文件找不到的情况，网上搜索即可解决，如需要安装pcre2\nyum install pcre2\n三. nginx配置 #user nobody; worker_processes auto; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; error_log logs/error.log warn; pid logs/nginx.pid; events { worker_connections 10240; use epoll; multi_accept on; } rtmp { server { listen 1935; chunk_size 4096; application live { live on; record off; } } } 四. 启动nginx服务 /usr/local/nginx-flv-rtmp/sbin/nginx -t /usr/local/nginx-flv-rtmp/sbin/nginx -c /usr/local/nginx-flv-rtmp/conf/nginx.conf 五. 测试推拉流 本地推流到服务器 ffmpeg -use_wallclock_as_timestamps 1 -rtsp_transport tcp -i \u0026quot;rtsp://admin:123456@192.168.1.108:554/cam/realmonitor?channel=1\u0026amp;subtype=0\u0026amp;unicast=true\u0026amp;proto=Onvif\u0026quot; -c:v copy -c:a aac -f flv rtmp://106.14.xx.xxx/live/stream 客户端VLC输入如下地址拉流 rtmp://106.14.xx.xxx/live/stream ","date":"2024-10-15T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8-rtsp%E6%8E%A8%E6%B5%81%E5%92%8Crtmp%E6%8B%89%E6%B5%81/","title":"使用nginx搭建流媒体服务器-rtsp推流和rtmp拉流"},{"content":"要在离线机器上安装 Python 的第三方包，可以按照以下步骤在联网机器上下载所需的包及其依赖项，然后复制到离线机器上进行安装。\n在联网机器上下载包 创建一个新目录来存放下载的包：\nmkdir /path/to/packages pip download 命令下载包及其依赖项。假设你要下载 requests 包：\npip download requests -d /path/to/packages\n这将下载 requests 及其所有依赖项到指定的目录 /path/to/packages。 如果你有多个包需要下载，可以将它们列在一个requirements.txt 文件中，然后使用以下命令:\npip download -r requirements.txt -d /path/to/packages 将包拷贝到离线机器 使用 USB 闪存驱动器、外部硬盘或通过局域网共享文件夹将 /path/to/packages 目录拷贝到离线机器。\n在离线机器上安装包 在离线机器上，打开命令行，进入包含下载包的目录：\ncd /path/to/packages 使用pip install 命令安装包：\npip install --no-index --find-links=. requests 如果有多个包需要安装，可以使用以下命令：\npip install --no-index --find-links=. -r requirements.txt\n这将从本地目录中根据 requirements.txt 文件安装所有包。 注意事项 确保联网机器和离线机器上的 Python 版本相同或兼容。 使用相同的操作系统版本（例如，Windows 和 Linux 的包可能不兼容）。 这样，你就可以在离线环境中安装 Python 的第三方包了。\n","date":"2023-10-11T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E4%B8%8B%E8%BD%BD%E7%A6%BB%E7%BA%BFpython%E5%8C%85/","title":"下载离线python包"},{"content":"保证联网机器和离线机器相同的操作系统 在有网机器上下载离线安装包 apt-get download package_name \u0026amp;\u0026amp; apt-cache depends -i package_name | awk '/Depends:/ {print $2}' | xargs apt-get download 将下载的离线安装包传输到离线机器，执行下面命令安装 dpkg -i --force-overwrite --force-depends *.deb 安装过程中如果提示缺少依赖，则继续在联网机器上下载安装包，然后传输的离线机器，直到安装完成 ","date":"2023-08-10T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/ubuntu%E5%AE%89%E8%A3%85%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/","title":"ubuntu安装包离线安装"},{"content":"\rUnable to display PDF file. Download instead.\n","date":"2022-07-13T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E8%B7%A8%E6%97%B6%E7%A9%BA%E7%9A%84%E9%9A%BE%E6%A0%B7%E6%9C%AC%E6%8C%96%E6%8E%98/","title":"跨时空的难样本挖掘"},{"content":"tsne(t-分布随机邻嵌入)是基于Python实现的降维算法，用于高维数据的可视化技术，将高维数据映射到低维空间（通常是二维或三维）以便于观察。\n本文将对tsne代码进行讲解，获取源码请点击：https://github.com/qingfeitang/tsne.git\n功能 降维：将高维特征向量数据降维为二维，通过散点图进行可视化。 输入数据处理：加载特征文件和目标文件，运行t-SNE后保存结果。 可视化：根据目标类别（targets）对降维后的点着色并保存图片。 函数解析 Hbeta(D, beta) 计算基于高斯分布的熵（H）和条件概率向量（P）。 输入距离矩阵的一行（D）以及β（高斯分布的精度），返回与某一指定精度的概率分布和熵。 通过高斯核计算相邻点的条件概率分布：\nP = np.exp(-D.copy() * beta) H = np.log(sumP) + beta * np.sum(D * P) / sumP P = P / sumP x2p(X, tol, perplexity) 通过二分搜索优化每个点的高斯核宽度，使其满足指定的困惑度（perplexity）。 生成数据点之间的条件概率矩阵P。 计算欧式距离的平方：\nD = np.add(np.add(-2 * np.dot(X, X.T), sum_X).T, sum_X) 根据误差动态调整高斯分布的宽度：\nwhile np.abs(Hdiff) \u0026gt; tol and tries \u0026lt; 50: if Hdiff \u0026gt; 0: # 如果熵大于目标值，调整β值 pca(X, no_dims) 对输入数据X进行PCA（主成分分析），降维至指定维度。 t-SNE可以选用PCA作为数据的初步降维步骤。 通过协方差矩阵特征分解提取主成分:\n(l, M) = np.linalg.eig(np.dot(X.T, X)) Y = np.dot(X, M[:, 0:no_dims]) tsne(X, no_dims, initial_dims, perplexity) 实现t-SNE算法，将输入数据降维至低维。 计算高维空间的条件概率矩阵：\nP = x2p(X, 1e-5, perplexity) P = P + np.transpose(P) P = P / np.sum(P) P = P * 4. 基于梯度下降更新坐标，使低纬度分布与高维分布接近：\nfor iter in range(max_iter): num = 1. / (1. + np.add(np.add(-2. * np.dot(Y, Y.T), sum_Y).T, sum_Y)) Q = num / np.sum(num) PQ = P - Q dY[i, :] = ... 实践分析 基于火灾数据集我们训练了3个分类模型，并在2000条测试集上面通过tsne算法做了可视化展示，效果如下：\n从图中可以看出，模型能够有效区分正样本和负样本，且正负样本之间的间隔（margin）较大，这表明模型在类别区分性方面表现较好。 根据可视化结果定位到误报的图像，可以看出干扰数据主要是夜间的灯光，进而对模型重点迭代优化此类数据即可。 ","date":"2022-06-18T00:00:00Z","image":"https://qingfeitang.github.io/full-stack-blog/p/%E5%9F%BA%E4%BA%8Epython%E5%AE%9E%E7%8E%B0%E7%9A%84t-snet-%E5%88%86%E5%B8%83%E9%9A%8F%E6%9C%BA%E9%82%BB%E5%B5%8C%E5%85%A5%E7%AE%97%E6%B3%95/shortcut_hu219529556376669999.jpg","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E5%9F%BA%E4%BA%8Epython%E5%AE%9E%E7%8E%B0%E7%9A%84t-snet-%E5%88%86%E5%B8%83%E9%9A%8F%E6%9C%BA%E9%82%BB%E5%B5%8C%E5%85%A5%E7%AE%97%E6%B3%95/","title":"基于Python实现的T-SNE(T-分布随机邻嵌入)算法"},{"content":"需求：\n有些文件存在于windows目录下，文件较大不方便复制，但需要ubuntu系统操作 ubuntu加密性不好，以挂载的方式使用ubuntu系统 挂载方法:\nwindow下设置共享文件夹\n右键待共享的文件夹 \u0026ndash;\u0026gt; 共享 \u0026ndash;\u0026gt; 共享(S) \u0026ndash;\u0026gt; 点击下拉倒三角.\n选择共享的用户，可以新建一个用户，然后点击添加(A)，在权限级别这块改成“读取/写入”，最后点击共享 ubuntu下挂载共享文件夹\n安装cifs\napt install cifs-utils\n执行挂载命令 mount -t cifs -o username=\u0026quot;ubuntu\u0026quot;,password=\u0026quot;123456\u0026quot;,rw,file_mode=0777,dir_mode=0777,uid=0,gid=0 //192.168.6.184/service /home/Data/mnt/\n其中:\nusername和password是windows下的用户名和密码\n192.168.6.184 是windows的ip\nservice 是windows的共享目录\n/home/Data/mnt/ 是ubuntu的挂载目录\n卸载共享文件夹\numount /home/Data/mnt/\n","date":"2022-04-28T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/ubuntu%E6%8C%82%E8%BD%BDwindows%E7%9B%AE%E5%BD%95/","title":"ubuntu挂载windows目录"},{"content":"\rUnable to display PDF file. Download instead.\n","date":"2022-04-02T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/spos-%E5%8D%95%E8%B7%AF%E5%BE%84%E7%A5%9E%E7%BB%8F%E6%9E%B6%E6%9E%84%E6%90%9C%E7%B4%A2/","title":"SPOS-单路径神经架构搜索"},{"content":"Faiss是由Facebook AI Research团队开发的一个库，旨在高效地进行大规模向量相似性搜索。它不仅支持CPU，还能利用GPU进行加速，非常适合处理大量高维数据。Faiss提供了多种索引类型，以适应不同的需求，从简单的平面索引（Flat Index）到更复杂的倒排文件索引（IVF）和乘积量化索引（PQ）。\nUnable to display PDF file. Download instead.\n","date":"2021-11-13T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/faiss-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%90%91%E9%87%8F%E7%9B%B8%E4%BC%BC%E6%80%A7%E6%90%9C%E7%B4%A2%E5%BA%93/","title":"Faiss-大规模向量相似性搜索库"},{"content":"源码请查阅 kmeans-for-anchors\nUnable to display PDF file. Download instead.\n","date":"2021-10-17T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/kmeans%E7%AE%97%E6%B3%95%E7%94%9F%E6%88%90%E5%8C%B9%E9%85%8D%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84anchor/","title":"kmeans算法生成匹配自定义数据集的anchor"},{"content":"DINO 是一种用于自监督视觉学习的深度学习模型，于 2021 年由 Facebook AI 提出。DINO 是最先探讨基于 Transformer 架构的自监督学习代表作之一，其通过在无标签图像上进行自监督训练来学习视觉特征表示。\nUnable to display PDF file. Download instead.\n","date":"2021-09-21T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/dino-%E4%B8%80%E7%A7%8D%E7%94%A8%E4%BA%8E%E8%87%AA%E7%9B%91%E7%9D%A3%E8%A7%86%E8%A7%89%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/","title":"DINO-一种用于自监督视觉学习的深度学习模型"},{"content":"\rUnable to display PDF file. Download instead.\n","date":"2021-08-14T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E5%8F%AF%E5%8F%98%E5%BD%A2%E5%8D%B7%E7%A7%AF/","title":"可变形卷积"},{"content":"\rUnable to display PDF file. Download instead.\n","date":"2021-07-17T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E6%A8%A1%E5%9E%8B%E8%BD%BB%E9%87%8F%E5%8C%96/","title":"模型轻量化"},{"content":"安装参考 安装前环境配置 使用安装CUDA的用户来操作 or 下载安装包编译，指定CUDA路径（bashrc文件里也需要有CUDA环境变量，nvcc -V有输出）\nexport PATH=$PATH:/usr/local/cuda-11.8/bin （指定本机CUDA路径）\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.8/lib64 （指定本机CUDA路径）\n使用pip安装 pip3 install pycuda\n下载安装包编译 下载pycuda压缩包：https://pypi.org/project/pycuda/#files[1] 下载pycuda压缩包 解压文件，进入到文件目录 执行python3 configure.py \u0026ndash;cuda-root=/usr/local/cuda-10.0 （本机CUDA路径） sudo python3 setup.py install 如果第四步报错的话，还是要切换到安装CUDA的用户下面来安装 ","date":"2021-06-30T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/pycuda%E5%AE%89%E8%A3%85/","title":"Pycuda安装"},{"content":"安装dkms apt install dkms\n查看nvidia驱动版本: ls /usr/src | grep nvidia\n假如nvidia版本号为：450.80.02，执行如下命令 dkms install -m nvidia -v 450.80.02\n","date":"2021-02-23T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/%E8%A7%A3%E5%86%B3ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia-smi-has-failed%E7%9A%84%E9%97%AE%E9%A2%98/","title":"解决Ubuntu系统下nvidia-smi has failed的问题"},{"content":"问题1：AttributeError: ‘tensorrt.tensorrt.Builder‘ object has no attribute ‘build_cuda_engine‘ 原因：tensorrt版本大于等于7时，不再使用build_cuda_engine\n解决方案： 将engine = builder.build_cuda_engine(network)替换成\nprofile = builder.create_optimization_profile() config = builder.create_builder_config() config.add_optimization_profile(profile) engine = builder.build_engine(network, config) 问题2：AttributeError: ‘tensorrt.tensorrt.Builder‘ object has no attribute ‘max_workspace_size‘ 原因：tensorrt8.0以上删除了max_workspace_size属性\n解决方案： 将builder.max_workspace_size = 1 \u0026lt;\u0026lt; 20替换成\nconfig = builder.create_builder_config() config.max_workspace_size = 1 \u0026lt;\u0026lt; 20 问题3：AttributeError: ‘tensorrt.tensorrt.Builder‘ object has no attribute ‘fp16_mode' 原因：tensorrt版本大于等于7时，不再使用\n解决方案：将builder.fp16_mode = True替换成\nconfig = builder.create_builder_config() # use_fp16: config.set_flag(trt.BuilderFlag.FP16) # use_int8: config.set_flag(trt.BuilderFlag.INT8) ","date":"2020-08-07T00:00:00Z","image":"https://qingfeitang.github.io/full-stack-blog/p/tensorrt%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%AF%E8%83%BD%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/how-it-works-inference.svg","permalink":"https://qingfeitang.github.io/full-stack-blog/p/tensorrt%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%AF%E8%83%BD%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"tensorrt使用过程中可能碰到的问题"},{"content":"安装 apt install samba\n使用 打开配置文件/etc/samba/smb.conf，在末尾添加如下信息，使其能够映射到windows目录 该配置中指明路径为/home/tqf，指定访问用户smbuser\n添加访问用户 useradd smbuser -g test # 将smbuser添加到test组\nsmbpasswd -a smbuser　# 将smbuser添加到samba\n重启samba，使配置文件生效 systemctl restart smbd\n常用命令 pdbedit -L # 查看当前samba添加了哪些用户\npdbedit -xu smbuser # 删除指定用户\n常见问题 如上图所示，如果windows突然无法访问samba服务器，报没有权限使用网络资源，需要联系这台服务器的管理员,按如下步骤解决：\nwin key+R，输入“control userpasswords2”，打开“用户账户” 选择高级选项卡，选择密码管理 点击windows凭据 如果列表中已经存在该服务器地址，点击该地址修改。否则点击添加windows凭据，填写samba服务器地址和用户名密码 再次访问samba服务器地址，正常打开 ","date":"2020-05-10T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bsamba%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/","title":"ubuntu系统下Samba安装与使用"},{"content":"新装的系统或者在拉取的docker镜像中,默认时区一般是美国时区,和我们相差8个小时,正常情况下需要将时区调整为东八区\n一. 查看当前系统时间 date -R\n结果时区是：-0500\n我需要的是东八区，这儿显示不是，所以需要设置一个时区\n二. 运行tzselect 在这里我们选择亚洲 Asia，确认之后选择中国（China)，最后选择北京(Beijing)\n三. 复制文件到/etc目录下 cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n四. 再次查看时间date -R，已经修改为北京时间 ","date":"2020-04-03T00:00:00Z","permalink":"https://qingfeitang.github.io/full-stack-blog/p/ubuntu%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/","title":"ubuntu修改时区"}]